S -> Program 'EOF',
Program -> ClassDeclaration*,
ClassDeclaration -> 'Class' 'Identifier' 'LeftCurlyBracket' ClassMember* 'RightCurlyBracket',
ClassMember -> Field | Method | MainMethod,
Field -> 'Public' Type 'Identifier' 'Semicolon',
MainMethod -> 'Public' 'Static' 'Void' 'Identifier' 'LeftParen' Type 'Identifier' 'RightParen' MethodRest? Block,
Method -> 'Public' Type 'Identifier' 'LeftParen' Parameters? 'RightParen' MethodRest? Block,
MethodRest -> 'Throws' 'Identifier',
Parameters -> Parameter ( 'Comma' Parameters)*,
Parameter -> Type 'Identifier',
Type -> BasicType ('LeftSquareBracket' 'RightSquareBracket')*,
BasicType -> 'Int' | 'Boolean' | 'Void' | 'Identifier',
Statement -> Block
           | EmptyStatement
           | IfStatement
           | ExpressionStatement
           | WhileStatement
           | ReturnStatement,

Block -> 'LeftCurlyBracket' BlockStatement* 'RightCurlyBracket',
BlockStatement -> Statement | LocalVariableDeclarationStatement,
LocalVariableDeclarationStatement -> Type 'Identifier' ( 'Assign' Expression )? 'Semicolon',
EmptyStatement -> 'Semicolon',
WhileStatement -> 'While' 'LeftParen' Expression 'RightParen' Statement,
IfStatement -> 'If' 'LeftParen' Expression 'RightParen' Statement ( 'Else' Statement )?,
ExpressionStatement -> Expression 'Semicolon',
ReturnStatement -> 'Return' Expression? 'Semicolon',
Expression -> AssignmentExpression,
AssignmentExpression -> LogicalOrExpression ('Assign' AssignmentExpression)?,
LogicalOrExpression -> LogicalAndExpression ('Or' LogicalAndExpression)*,
LogicalAndExpression -> EqualityExpression ('And' EqualityExpression)*,
EqualityExpression -> RelationalExpression (('Equals' | 'NotEquals') RelationalExpression)*,
RelationalExpression -> AdditiveExpression (('LessThan' | 'LessThanOrEquals' | 'GreaterThan' | 'GreaterThanOrEquals') AdditiveExpression)*,
AdditiveExpression -> MultiplicativeExpression (('Add' | 'Subtract') MultiplicativeExpression)*,
MultiplicativeExpression -> UnaryExpression (('Multiply' | 'Divide' | 'Modulo') UnaryExpression)*,
UnaryExpression -> PostfixExpression | ('Not' | 'Subtract') UnaryExpression,
PostfixExpression -> PrimaryExpression (PostfixOp)*,
PostfixOp -> MethodInvocation
           | FieldAccess
           | ArrayAccess,

MethodInvocation -> 'Dot' 'Identifier' 'LeftParen' Arguments 'RightParen',
FieldAccess -> 'Dot' 'Identifier',
ArrayAccess -> 'LeftSquareBracket' Expression 'RightSquareBracket',
Arguments -> (Expression ('Comma' Expression)*)?,
PrimaryExpression -> 'Null' | 'False' | 'True' | 'IntLiteral' | 'Identifier' | 'Identifier' 'LeftParen' Arguments 'RightParen' | 'This'
                    | 'LeftParen' Expression 'RightParen' | NewObjectExpression | NewArrayExpression,

NewObjectExpression -> 'New' 'Identifier' 'LeftParen' 'RightParen',
NewArrayExpression -> 'New' BasicType 'LeftSquareBracket' Expression 'RightSquareBracket' ( 'LeftSquareBracket' 'RightSquareBracket')*
